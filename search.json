[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "ImportError_dll_load_failed_while_importing_cv2.html",
    "href": "ImportError_dll_load_failed_while_importing_cv2.html",
    "title": "cudawarped",
    "section": "",
    "text": "If your on Windows using python >= 3.8 having built OpenCV >= 4.6 from source and your seeing the above error when calling import cv2, this short guide should help solve your problem.\nThe guide assumes that you have either installed the python bindings during the build process (not recommended) or manually copied cv2.cp3x-win_amd64.pyd to your distributions site-packages directory (e.g. C:\\Users\\<USER>\\mambaforge\\Lib\\site-packages).\nSo what’s the issue? Although the message is quite explicit regarding the cause, it doesn’t really help with finding a solution. In a nutshell python has found cv2.cp3x-win_amd64.pyd, tried and then failed to load it because a it can’t find a dependant shared library. Now the advice I have seen online regarding this is to dig out trusty dependancy walker, load the cv2.cp3x-win_amd64.pyd and see which dependencies the system can’t find.\nNow this is solid advice if we had a C++ application and/or we were using python < 3.8 (which uses the system/user path for dll resolution), however we are not, so even if dependency walker can’t detect any problems we may still be facing the above error.\nThe good news is there is an easy fix if you know where the missing DLL’s are and only slightly more involved if you don’t as long as you have access to the missing DLL’s on your system.\n\n\nTo demonstrate the fix, I have built the OpenCV shared library and corresponding python bindings and manually copied them to the site-packages directory inside my python distribution (C:\\Users\\b\\mambaforge\\Lib\\site-packages).\nAs I have built a shared library the python bindings are dependant on opencv_world470.dll and I haven’t told python where they are I get the error shown below whenn trying to import them.\n\n\n\nimport cv2\n\nImportError: DLL load failed while importing cv2: The specified module could not be found.\n\n\n\n\nGiven that I know the path to OpenCV’s shared libraries is required and I haven’t told python about it, the first thing to try is to add it to pythons DLL search path and see if that solves the problem.\n\nimport os\nos.add_dll_directory(\"D:\\\\build\\\\opencv\\\\4_7_0\\\\cuda_12_D\\\\bin\")\nimport cv2\n\nImportError: DLL load failed while importing cv2: The specified module could not be found.\n\n\nAhh the same error, what’s going on.\nIn this case I also built OpenCV against the CUDA SDK so there is a good chance its missing DLL’s from there aswell. I can try to fix the issue by simply adding the location of the CUDA SDK binaries to the python DLL search path as shown below.\n\nos.add_dll_directory(\"C:\\\\Program Files\\\\NVIDIA GPU Computing Toolkit\\\\CUDA\\\\v12.0\\\\bin\")\nimport cv2\n\nThis appears to have solved the issue, but its a good idea to examine the build information just to double check I have loaded the right version of OpenCV.\n\nprint(cv2.getBuildInformation())\n\n\nGeneral configuration for OpenCV 4.7.0 =====================================\n  Version control:               4.7.0\n\n  Extra modules:\n    Location (extra):            D:/repos/opencv/contrib/modules\n    Version control (extra):     4.7.0\n\n  Platform:\n    Timestamp:                   2023-01-31T15:00:40Z\n    Host:                        Windows 10.0.22621 AMD64\n    CMake:                       3.25.1\n    CMake generator:             Ninja\n    CMake build tool:            D:/bin/ninja/ninja.exe\n    MSVC:                        1934\n    Configuration:               Debug\n\n  CPU/HW features:\n    Baseline:                    SSE SSE2 SSE3\n      requested:                 SSE3\n    Dispatched code generation:  SSE4_1 SSE4_2 FP16 AVX AVX2 AVX512_SKX\n      requested:                 SSE4_1 SSE4_2 AVX FP16 AVX2 AVX512_SKX\n      SSE4_1 (18 files):         + SSSE3 SSE4_1\n      SSE4_2 (2 files):          + SSSE3 SSE4_1 POPCNT SSE4_2\n      FP16 (1 files):            + SSSE3 SSE4_1 POPCNT SSE4_2 FP16 AVX\n      AVX (5 files):             + SSSE3 SSE4_1 POPCNT SSE4_2 AVX\n      AVX2 (34 files):           + SSSE3 SSE4_1 POPCNT SSE4_2 FP16 FMA3 AVX AVX2\n      AVX512_SKX (8 files):      + SSSE3 SSE4_1 POPCNT SSE4_2 FP16 FMA3 AVX AVX2 AVX_512F AVX512_COMMON AVX512_SKX\n\n  C/C++:\n    Built as dynamic libs?:      YES\n    C++ standard:                11\n    C++ Compiler:                C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.34.31933/bin/Hostx64/x64/cl.exe  (ver 19.34.31937.0)\n    C++ flags (Release):         /DWIN32 /D_WINDOWS /W4 /GR  /D _CRT_SECURE_NO_DEPRECATE /D _CRT_NONSTDC_NO_DEPRECATE /D _SCL_SECURE_NO_WARNINGS /Gy /bigobj /Oi  /fp:precise /FS     /EHa /wd4127 /wd4251 /wd4324 /wd4275 /wd4512 /wd4589 /wd4819  /MD /O2 /Ob2 /DNDEBUG \n    C++ flags (Debug):           /DWIN32 /D_WINDOWS /W4 /GR  /D _CRT_SECURE_NO_DEPRECATE /D _CRT_NONSTDC_NO_DEPRECATE /D _SCL_SECURE_NO_WARNINGS /Gy /bigobj /Oi  /fp:precise /FS     /EHa /wd4127 /wd4251 /wd4324 /wd4275 /wd4512 /wd4589 /wd4819  /MDd /Zi /Ob0 /Od /RTC1 \n    C Compiler:                  C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.34.31933/bin/Hostx64/x64/cl.exe\n    C flags (Release):           /DWIN32 /D_WINDOWS /W3  /D _CRT_SECURE_NO_DEPRECATE /D _CRT_NONSTDC_NO_DEPRECATE /D _SCL_SECURE_NO_WARNINGS /Gy /bigobj /Oi  /fp:precise /FS       /MD /O2 /Ob2 /DNDEBUG \n    C flags (Debug):             /DWIN32 /D_WINDOWS /W3  /D _CRT_SECURE_NO_DEPRECATE /D _CRT_NONSTDC_NO_DEPRECATE /D _SCL_SECURE_NO_WARNINGS /Gy /bigobj /Oi  /fp:precise /FS     /MDd /Zi /Ob0 /Od /RTC1 \n    Linker flags (Release):      /machine:x64  /INCREMENTAL:NO \n    Linker flags (Debug):        /machine:x64  /debug /INCREMENTAL \n    ccache:                      NO\n    Precompiled headers:         NO\n    Extra dependencies:          cudart_static.lib nppc.lib nppial.lib nppicc.lib nppidei.lib nppif.lib nppig.lib nppim.lib nppist.lib nppisu.lib nppitc.lib npps.lib cublas.lib cudnn.lib cufft.lib -LIBPATH:\"C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.0/lib/x64\"\n    3rdparty dependencies:\n\n  OpenCV modules:\n    To be built:                 aruco barcode bgsegm bioinspired calib3d ccalib core cudaarithm cudabgsegm cudacodec cudafeatures2d cudafilters cudaimgproc cudalegacy cudaobjdetect cudaoptflow cudastereo cudawarping cudev datasets dnn dnn_objdetect dnn_superres dpm face features2d flann fuzzy gapi hfs highgui img_hash imgcodecs imgproc intensity_transform line_descriptor mcc ml objdetect optflow phase_unwrapping photo plot python3 quality rapid reg rgbd saliency shape stereo stitching structured_light superres surface_matching text tracking ts video videoio videostab wechat_qrcode world xfeatures2d ximgproc xobjdetect xphoto\n    Disabled:                    -\n    Disabled by dependency:      -\n    Unavailable:                 alphamat cvv freetype hdf java julia matlab ovis python2 python2 sfm viz\n    Applications:                tests perf_tests examples apps\n    Documentation:               NO\n    Non-free algorithms:         NO\n\n  Windows RT support:            NO\n\n  GUI: \n    Win32 UI:                    YES\n    OpenGL support:              YES (opengl32 glu32)\n    VTK support:                 NO\n\n  Media I/O: \n    ZLib:                        build (ver 1.2.13)\n    JPEG:                        build-libjpeg-turbo (ver 2.1.3-62)\n      SIMD Support Request:      YES\n      SIMD Support:              NO\n    WEBP:                        build (ver encoder: 0x020f)\n    PNG:                         build (ver 1.6.37)\n    TIFF:                        build (ver 42 - 4.2.0)\n    JPEG 2000:                   build (ver 2.4.0)\n    OpenEXR:                     build (ver 2.3.0)\n    HDR:                         YES\n    SUNRASTER:                   YES\n    PXM:                         YES\n    PFM:                         YES\n\n  Video I/O:\n    DC1394:                      NO\n    FFMPEG:                      YES (prebuilt binaries)\n      avcodec:                   YES (58.134.100)\n      avformat:                  YES (58.76.100)\n      avutil:                    YES (56.70.100)\n      swscale:                   YES (5.9.100)\n      avresample:                YES (4.0.0)\n    GStreamer:                   NO\n    DirectShow:                  YES\n    Media Foundation:            YES\n      DXVA:                      YES\n\n  Parallel framework:            Concurrency\n\n  Trace:                         YES (with Intel ITT)\n\n  Other third-party libraries:\n    Intel IPP:                   2020.0.0 Gold [2020.0.0]\n           at:                   D:/build/opencv/4_7_0/cuda_12_D/3rdparty/ippicv/ippicv_win/icv\n    Intel IPP IW:                sources (2020.0.0)\n              at:                D:/build/opencv/4_7_0/cuda_12_D/3rdparty/ippicv/ippicv_win/iw\n    Lapack:                      NO\n    Eigen:                       NO\n    Custom HAL:                  NO\n    Protobuf:                    build (3.19.1)\n\n  NVIDIA CUDA:                   YES (ver 12.0, CUFFT CUBLAS NVCUVID NVCUVENC FAST_MATH)\n    NVIDIA GPU arch:             50 52 60 61 70 75 80 86 89 90\n    NVIDIA PTX archs:            90\n\n  cuDNN:                         YES (ver 8.7.0)\n\n  OpenCL:                        YES (NVD3D11)\n    Include path:                D:/repos/opencv/opencv/3rdparty/include/opencl/1.2\n    Link libraries:              Dynamic load\n\n  Python 3:\n    Interpreter:                 C:/Users/b/mambaforge/python.exe (ver 3.9.13)\n    Libraries:                   C:/Users/b/mambaforge//libs/python39.lib (ver 3.9.13)\n    numpy:                       C:/Users/b/mambaforge/Lib/site-packages/numpy/core/include (ver 1.23.5)\n    install path:                C:/Users/b/mambaforge/Lib/site-packages/cv2/python-3.9\n\n  Python (for build):            C:/Users/b/mambaforge/python.exe\n\n  Java:                          \n    ant:                         NO\n    JNI:                         NO\n    Java wrappers:               NO\n    Java tests:                  NO\n\n  Install to:                    D:/build/opencv/4_7_0/cuda_12_0/install\n-----------------------------------------------------------------\n\n\n\n\nThat was easy but what can I do if I’m not as good at guessing what’s missing. Next I will use the same example again to demonstrate how to find out which DLL’s python is searching for.\n\n\n\nTo find which DLL’s are missing we can use process monitor which will enable us to see the names of the DLL’s which python is trying to load.\nProcess monitor by default has produces a significant amount of output so it is a good idea to filter out as much of this noise as you can. To do this you can either load this filter (as suggested by LaurentBerger) with “File->Import Configuration”, or manually add the filter entries on the “Process Monitor Filter” window, which is opened by default every time you launch the application, details below.\nManually Adding Filter Entries\nSince we only want to view shared libaries which are accessed by the python.exe process, we can add the following filters to make our lives easier\n\nProcess Name -> is -> python.exe\nOperation -> is -> CreateFile\nResult -> is -> NAME NOT FOUND\nResult -> is -> SUCCESS\nPath -> contains -> .dll\nPath -> contains -> .pyd (not striclty necessary, if this was missing the error would be “ModuleNotFoundError: No module named ‘cv2’” but its a shared library so why not)\n\nYour filter should now resemble the below.\n\nBefore continuing it is advisable to close any other python proceses as the output from these will pollute the main window.\nNow start python and before typing import cv2, press the clear button (red trash can) in process monitor to clear any output generated during python’s initialization.\n\nimport cv2\n\nImportError: DLL load failed while importing cv2: The specified module could not be found.\n\n\n\n\n\ntitle\n\n\nBecause I have reset the python DLL search path on running import cv2 I get the above output in process monitor which shows that we successfully found cv2.cp3x-win_amd64.pyd (otherwise we would see the “ModuleNotFoundError: No module named ‘cv2’” error) however it also shows several attempts have been made to locate opencv_img_hash_470.dll and opencv_world470.dll without success.\nAs before we add the directory containing these to the python DLL search path.\n\nimport os\nos.add_dll_directory(\"D:\\\\build\\\\opencv\\\\4_7_0\\\\cuda_12_D\\\\bin\")\nimport cv2\n\nImportError: DLL load failed while importing cv2: The specified module could not be found.\n\n\n\n\n\ntitle\n\n\nNow process monitor shows that opencv_img_hash_470.dll and opencv_world470.dll were located successfully after a few attempts however we are missing nppc64_12.dll which is part of the CUDA SDK. As before if we add the CUDA SDK binary directory to the python DLL search path the call to import cv2 will be successful. If however we were still seeing the same error we could simply repeat the process, that is examine the output in process monitor and add the directories containing the missing DLL’s to the python DLL search path."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "cudawarped",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "nbs/ImportError_dll_load_failed_while_importing_cv2.html",
    "href": "nbs/ImportError_dll_load_failed_while_importing_cv2.html",
    "title": "cudawarped",
    "section": "",
    "text": "If your on Windows using python >= 3.8 having built OpenCV >= 4.6 from source and your seeing the above error when calling import cv2, this short guide should help solve your problem.\nThe guide assumes that you have either installed the python bindings during the build process (not recommended) or manually copied cv2.cp3x-win_amd64.pyd to your distributions site-packages directory (e.g. C:\\Users\\<USER>\\mambaforge\\Lib\\site-packages).\nSo what’s the issue? Although the message is quite explicit regarding the cause, it doesn’t really help with finding a solution. In a nutshell python has found cv2.cp3x-win_amd64.pyd, tried and then failed to load it because a it can’t find a dependant shared library. Now the advice I have seen online regarding this is to dig out trusty dependancy walker, load the cv2.cp3x-win_amd64.pyd and see which dependencies the system can’t find.\nNow this is solid advice if we had a C++ application and/or we were using python < 3.8 (which uses the system/user path for dll resolution), however we are not, so even if dependency walker can’t detect any problems we may still be facing the above error.\nThe good news is there is an easy fix if you know where the missing DLL’s are and only slightly more involved if you don’t as long as you have access to the missing DLL’s on your system.\n\n\nTo demonstrate the fix, I have built the OpenCV shared library and corresponding python bindings and manually copied them to the site-packages directory inside my python distribution (C:\\Users\\b\\mambaforge\\Lib\\site-packages).\nAs I have built a shared library the python bindings are dependant on opencv_world470.dll and I haven’t told python where they are I get the error shown below whenn trying to import them.\n\n\n\nimport cv2\n\nImportError: DLL load failed while importing cv2: The specified module could not be found.\n\n\n\n\nGiven that I know the path to OpenCV’s shared libraries is required and I haven’t told python about it, the first thing to try is to add it to pythons DLL search path and see if that solves the problem.\n\nimport os\nos.add_dll_directory(\"D:\\\\build\\\\opencv\\\\4_7_0\\\\cuda_12_D\\\\bin\")\nimport cv2\n\nImportError: DLL load failed while importing cv2: The specified module could not be found.\n\n\nAhh the same error, what’s going on.\nIn this case I also built OpenCV against the CUDA SDK so there is a good chance its missing DLL’s from there aswell. I can try to fix the issue by simply adding the location of the CUDA SDK binaries to the python DLL search path as shown below.\n\nos.add_dll_directory(\"C:\\\\Program Files\\\\NVIDIA GPU Computing Toolkit\\\\CUDA\\\\v12.0\\\\bin\")\nimport cv2\n\nThis appears to have solved the issue, but its a good idea to examine the build information just to double check I have loaded the right version of OpenCV.\n\nprint(cv2.getBuildInformation())\n\nGeneral configuration for OpenCV 4.7.0 =====================================\n  Version control:               4.7.0\n\n  Extra modules:\n    Location (extra):            D:/repos/opencv/contrib/modules\n    Version control (extra):     4.7.0\n\n  Platform:\n    Timestamp:                   2023-01-31T15:00:40Z\n    Host:                        Windows 10.0.22621 AMD64\n    CMake:                       3.25.1\n    CMake generator:             Ninja\n    CMake build tool:            D:/bin/ninja/ninja.exe\n    MSVC:                        1934\n    Configuration:               Debug\n\n  CPU/HW features:\n    Baseline:                    SSE SSE2 SSE3\n    \n...\nThat was easy but what can I do if I’m not as good at guessing what’s missing. Next I will use the same example again to demonstrate how to find out which DLL’s python is searching for.\n\n\n\nTo find which DLL’s are missing we can use process monitor which will enable us to see the names of the DLL’s which python is trying to load.\nProcess monitor by default has produces a significant amount of output so it is a good idea to filter out as much of this noise as you can. To do this you can either load this filter (as suggested by LaurentBerger) with “File->Import Configuration”, or manually add the filter entries on the “Process Monitor Filter” window, which is opened by default every time you launch the application, details below.\n\n\nSince we only want to view shared libaries which are accessed by the python.exe process, we can add the following filters to make our lives easier\n\nProcess Name -> is -> python.exe\nOperation -> is -> CreateFile\nResult -> is -> NAME NOT FOUND\nResult -> is -> SUCCESS\nPath -> contains -> .dll\nPath -> contains -> .pyd (not striclty necessary, if this was missing the error would be “ModuleNotFoundError: No module named ‘cv2’” but its a shared library so why not)\n\nYour filter should now resemble the below.\n\nBefore continuing it is advisable to close any other python proceses as the output from these will pollute the main window.\nNow start python and before typing import cv2, press the clear button (red trash can) in process monitor to clear any output generated during python’s initialization.\n\nimport cv2\n\nImportError: DLL load failed while importing cv2: The specified module could not be found.\n\n\n\nBecause I have reset the python DLL search path on running import cv2 I get the above output in process monitor which shows that we successfully found cv2.cp3x-win_amd64.pyd (otherwise we would see the “ModuleNotFoundError: No module named ‘cv2’” error) however it also shows several attempts have been made to locate opencv_img_hash_470.dll and opencv_world470.dll without success.\nAs before we add the directory containing these to the python DLL search path.\n\nimport os\nos.add_dll_directory(\"D:\\\\build\\\\opencv\\\\4_7_0\\\\cuda_12_D\\\\bin\")\nimport cv2\n\nImportError: DLL load failed while importing cv2: The specified module could not be found.\n\n\n\nNow process monitor shows that opencv_img_hash_470.dll and opencv_world470.dll were located successfully after a few attempts however we are missing nppc64_12.dll which is part of the CUDA SDK. As before if we add the CUDA SDK binary directory to the python DLL search path the call to import cv2 will be successful. If however we were still seeing the same error we could simply repeat the process, that is examine the output in process monitor and add the directories containing the missing DLL’s to the python DLL search path."
  }
]